// LASER Focus Pattern Generator Macro For OpenBuilds Control
// V0.9
// Change these values to customise basic operation:

const z_Range = 3;            // Z movement each side of current position (mm)

const power_Percent = 80;    // Engraving power (0-100%)
const engrave_Speed = 2000;    // Engraving speed (mm/min)
const num_Lines = 8;        // Number of lines in test pattern (must be >0)
const line_Spacing = 0.3;    // Spacing between lines (mm)

const power_Max = 1000;        // Maximum power in spindle speed units - Check value of $30 in GRBL settings
const power_Min = 0;        // Minimum power in spindle speed units - Check value of $31 in GRBL settings
const x_acceleration = 320;    // Machine X acceleration value (mm/s^2)- Check value of $120 n GRBL settings
                            // (Used to calculate over-travel - Set to zero to disable over-travel)

const xplus_Only = "no";    // "no" = move to left of X0 to allow acceleration
                            // "yes" = start acceleration from X0 - pattern will be shifted to the right
const tilt = 0.12;            //     Slope of test pattern (mm/mm)                     
//
// Generates GCode to produce a pattern with varying Z height to assist with LASER focussing
// Running this macro will replace any existing GCode in Control
// The GCode uses M4 to control the LASER and so needs LASER mode enabled ($32 = 1 in GRBL settings)
//
// Use at own risk!
// DAG 23/4/23
//
// Macro continues below...

var p_Power = ((power_Max - power_Min) * power_Percent / 100 + power_Min).toFixed();// Calculate engraving power in spindle speed units
var over_Travel = 0;                                                                // Distance required to accelerate to engraving speed
if (x_acceleration > 0){ over_Travel = (engrave_Speed / x_acceleration)};            // Calculate over-travel if X axis acceleration is set

var line_Length = (z_Range * 2) / tilt;                                                // Calculate pattern length
var start_X = 0;
if (xplus_Only != "yes" ) {start_X = -over_Travel};                                    // Starting point for X travel - NOT engraving

var z_Min = z_Range * (-1);
var z_Max = z_Range;


// Start building the GCode string that will be the eventual output

var gcode = "; Laser Focus Test Pattern\n;\n";
gcode += "; Z Range +/- " + z_Range + "mm\n";
gcode += "; Generated by Openbuilds Control macro V0.9 by Misterg\n;\n";
gcode += "G21; mm-mode\nG90; Absolute Positioning\n";
gcode += "F"+ engrave_Speed +" ; Set engraving speed\n";
gcode += "M04 S" + p_Power + " ; Laser on at set power\n";

// Draw lines

for (var lineCount =0; lineCount < num_Lines; lineCount ++){
    var gcYval = (line_Spacing * lineCount);                                // Current Y position
  
    gcode += "G0 X" + start_X +" Y" + gcYval +" Z"+ z_Min + "\n";            // Rapid to start of row
    gcode += "G91\nG0 X" + over_Travel + "\n";                                // Rapid to start of line (relative)
    gcode += "G1 X" + line_Length + " Z" + (z_Range * 2) + "\n";            // Cut to end of line (relative)
    gcode += "G0 X" + over_Travel +"\nG90\n";                                // Rapid to end of deceleration zone (relative)
    }

// Add Tick Marks
gcode += "G0 Z0; Add tick marks\n";

var major_Ticks = z_Range * 2;                    // 1 majortick per mm
var minor_Ticks = 10;                            // 10 minor tick marks per mm
var y_Pos = (line_Spacing * (num_Lines -1));    // Bottom of tick marks
var gcXval = 0;                                    // Calculated position
var line_Start = start_X + over_Travel;            // Start of labels
var label_Z = z_Min;
var z_MajorIncrement = (z_Max - z_Min)/(major_Ticks );
var z_MinorIncrement = z_MajorIncrement / minor_Ticks;
var x_Increment = line_Length / (major_Ticks * minor_Ticks);

for( var i =0 ;i<= major_Ticks;i++){
    gcXval =  line_Start + line_Length * i / major_Ticks;
    label_Z = z_Min + z_MajorIncrement * i;
  
    gcode += "G0 X" + gcXval +" Y" + y_Pos +" Z" +label_Z + "\n";                // move to start of major tick
    gcode += "G91\nG1 Y4\n";                                                    // draw tick & stay in G91
  
    // add labels
  
    if (i < major_Ticks / 2){                                                    // Add +/- sign if needed
        gcode += ";minus\nG0 X2.571 Y1.5\nG1 X-2.571\nG0 X3 Y-1.5\n";
    }
    else if (i > major_Ticks /2){
        gcode += ";plus\nG0 X1.286 Y0.214\nG1 Y2.572\nG0 X1.285 Y-1.286\nG1 X-2.571\nG0 X3 Y-1.5\n";
    }
    gcode += getGcode( ""+ Math.abs(i-major_Ticks/2)) +"G90\n";                            // Get numeral & switch back to G90
  
    gcode += "G0 X" + gcXval +" Y" + y_Pos +" Z" +label_Z + "\n";                // move back to start of major tick

  
    if (i < major_Ticks){                                                            // Fill in minor ticks
        for( var j = 1; j <minor_Ticks; j++){
            gcode += "G91\nG0 X" + x_Increment + " Z" + z_MinorIncrement + "\n";    // Move to start of tick
            if (j == (minor_Ticks /2)) {
                gcode += "\nG1 Y3\nG0 Y-3\n";                                        // Draw '5s' tick
            }
            else {
                gcode += "\nG1 Y2\nG0 Y-2\n";                                        // Draw minor tick
            }; 
        }
    gcode += "G90\n";
    }
}
      
// Tidy up the end of the GCode and pass to OB COntrol

gcode += "G0 X0 Y0 Z0\n";
gcode += "M5 S0\nM2\n";                // LASER off & End of program

editor.session.setValue(gcode);
parseGcodeInWebWorker(gcode)
printLog("<span class='fg-red'>[ Laser Test Pattern ] </span><span class='fg-green'>GCODE Loaded</span>")

// The End
 
function getGcode (numeral){        // Returns GCode string representing numbers 0 - 9
                                    // No error checking!
const gc_num = [];

gc_num[0] = `;zero
G0 X0.857 Y3
G1 X0.286
X0.428 Y-0.143
X0.286 Y-0.428
X0.143 Y-0.715
Y-0.428
X-0.143 Y-0.715
X-0.286 Y-0.428
X-0.428 Y-0.143
X-0.286
X-0.428 Y0.143
X-0.286 Y0.428
X-0.143 Y0.715
Y0.428
X0.143 Y0.715
X0.286 Y0.428
X0.428 Y0.143
`;

gc_num[1] = `;one
G0 Y2.429
G1 X0.286 Y0.142
X0.428 Y0.429
Y-3
`;

gc_num[2] = `;two
G0 X0.143 Y2.286
G1 Y0.143
X0.143 Y0.285
X0.143 Y0.143
X0.285 Y0.143
X0.572
X0.285 Y-0.143
X0.143 Y-0.143
X0.143 Y-0.285
Y-0.286
X-0.143 Y-0.286
X-0.285 Y-0.428
X-1.429 Y-1.429
X2
`;

gc_num[3] = `;three
G0 X0.286 Y3
G1 X1.571
X-0.857 Y-1.143
X0.429
X0.285 Y-0.143
X0.143 Y-0.143
X0.143 Y-0.428
Y-0.286
X-0.143 Y-0.428
X-0.286 Y-0.286
X-0.428 Y-0.143
X-0.429
X-0.428 Y0.143
X-0.143 Y0.143
X-0.143 Y0.285
`;

gc_num[4] = `;four
G0 X2.143 Y1
G1 X-2.143
X1.429 Y2
Y-3
`;

gc_num[5] = `;five
G0 X1.714 Y3
G1 X-1.428
X-0.143 Y-1.286
X0.143 Y0.143
X0.428 Y0.143
X0.429
X0.428 Y-0.143
X0.286 Y-0.286
X0.143 Y-0.428
Y-0.286
X-0.143 Y-0.428
X-0.286 Y-0.286
X-0.428 Y-0.143
X-0.429
X-0.428 Y0.143
X-0.143 Y0.143
X-0.143 Y0.285
`;

gc_num[6] = `;six
G0 Y1
G1 X0.143 Y0.429
X0.286 Y0.285
X0.428 Y0.143
X0.143
X0.429 Y-0.143
X0.285 Y-0.285
X0.143 Y-0.429
Y-0.143
X-0.143 Y-0.428
X-0.285 Y-0.286
X-0.429 Y-0.143
X-0.143
X-0.428 Y0.143
X-0.286 Y0.286
X-0.143 Y0.571
Y0.714
X0.143 Y0.715
X0.286 Y0.428
X0.428 Y0.143
X0.286
X0.428 Y-0.143
X0.143 Y-0.286
`;

gc_num[7] = `;seven
G0 Y3
G1 X2
X-1.429 Y-3
`;

gc_num[8] = `;eight
G0 X0.714 Y3
G1 X-0.428 Y-0.143
X-0.143 Y-0.286
Y-0.285
X0.143 Y-0.286
X0.285 Y-0.143
X0.572 Y-0.143
X0.428 Y-0.143
X0.286 Y-0.285
X0.143 Y-0.286
Y-0.429
X-0.143 Y-0.285
X-0.143 Y-0.143
X-0.428 Y-0.143
X-0.572
X-0.428 Y0.143
X-0.143 Y0.143
X-0.143 Y0.285
Y0.429
X0.143 Y0.286
X0.286 Y0.285
X0.428 Y0.143
X0.572 Y0.143
X0.285 Y0.143
X0.143 Y0.286
Y0.285
X-0.143 Y0.286
X-0.428 Y0.143
X-0.572
`;

gc_num[9] = `;nine
G0 X1.857 Y2
G1 X-0.143 Y-0.429
X-0.285 Y-0.285
X-0.429 Y-0.143
X-0.143
X-0.428 Y0.143
X-0.286 Y0.285
X-0.143 Y0.429
Y0.143
X0.143 Y0.428
X0.286 Y0.286
X0.428 Y0.143
X0.143
X0.429 Y-0.143
X0.285 Y-0.286
X0.143 Y-0.571
Y-0.714
X-0.143 Y-0.715
X-0.285 Y-0.428
X-0.429 Y-0.143
X-0.286
X-0.428 Y0.143
X-0.143 Y0.286
`;

return gc_num[numeral];
}